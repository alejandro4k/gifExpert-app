{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","event","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","selected","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","setSelected","Arrow","text","ArrowLeft","ArrowRight","giftSections","arrowLeft","arrowRight","onSelect","key","GifExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4710fb10.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const handleInputChange = event =>setInputValue(event.target.value);\r\n  const handleSubmit = (e)=>{\r\n    e.preventDefault()\r\n    if(inputValue.trim().length>2){\r\n\r\n        setCategories(categories=>[inputValue,...categories])\r\n        setInputValue('')\r\n    }\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories:PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&rating=r&api_key=dwkAv3Z92zCkB089sB4AS1d9BekIEjTx`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n","import React from 'react';\r\n\r\n\r\nexport const GifGridItem = ({id,title,url,selected}) => {\r\n    return (\r\n        //card animate__animated animate__fadeIn animate__slow\r\n        <div key={id} className={`card animate__animated animate__backInLeft`}>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from \"react\";\r\nimport ScrollMenu from \"react-horizontal-scrolling-menu\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n  const [selected, setSelected] = useState('')\r\n  \r\n  const Arrow = ({ text, className }) => {\r\n    return (\r\n      <div\r\n        className={className}\r\n      >{text}</div>\r\n    );\r\n  };\r\n  const onSelect = key => {\r\n    setSelected(key)\r\n  }\r\n  \r\n  const ArrowLeft = Arrow({ text: '<', className: 'arrow-prev' });\r\n  const ArrowRight = Arrow({ text: '>', className: 'arrow-next' })\r\n \r\n  const giftSections = images.map((img) => (\r\n    <GifGridItem key={img.id} {...img} selected={selected} />\r\n  ))\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__slideInLeft\">{category}</h3>\r\n      {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n      {/* <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div> */}\r\n      <ScrollMenu\r\n          data={giftSections}\r\n          arrowLeft={ArrowLeft}\r\n          arrowRight={ArrowRight}\r\n          selected={selected}\r\n          onSelect={onSelect}\r\n        \r\n        />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category}/>\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<GifExpertApp/>, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}